name: DevSecOps Pipeline

on:
  push:
    branches: [main]

jobs:
  build-test-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18.x

      - name: Install dependencies
        run: |
          cd frontend && npm install
          cd ../backend && npm install

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONARQUBE_URL }}
        with:
          args: "-Dsonar.projectKey=ilusionesweb"

      - name: Build and Push Docker images
        env:
          REGISTRY: registry.digitalocean.com
          NAMESPACE: ilusionesweb
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "${{ secrets.DO_ACCESS_TOKEN }}" | docker login registry.digitalocean.com -u oauth2 --password-stdin
          docker build -t $REGISTRY/$NAMESPACE/app:frontend-$IMAGE_TAG ./frontend
          docker push $REGISTRY/$NAMESPACE/app:frontend-$IMAGE_TAG
          docker build -t $REGISTRY/$NAMESPACE/app:backend-$IMAGE_TAG ./backend
          docker push $REGISTRY/$NAMESPACE/app:backend-$IMAGE_TAG

  deploy:
    needs: build-test-scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up kubectl
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
        run: |
          mkdir -p ~/.kube
          echo "$KUBE_CONFIG" | base64 -d > ~/.kube/config
          kubectl config view
          kubectl get nodes

      - name: Deploy to Kubernetes
        run: |
          export GITHUB_SHA=${{ github.sha }}
          envsubst < scripts/frontend-deployment.yaml | kubectl apply -f -
          envsubst < scripts/backend-deployment.yaml | kubectl apply -f -
          kubectl apply -f scripts/prometheus-rbac.yaml
          kubectl apply -f scripts/prometheus-deployment.yaml
          kubectl rollout status deployment/frontend --timeout=180s
          kubectl rollout status deployment/backend --timeout=180s